{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/from_iterator_map.js","../lib/from_iterator.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport getter from '@stdlib/array-base-getter';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport inherits from '@stdlib/utils-inherit';\nimport parent from '@stdlib/array-fixed-endian-float64'; // eslint-disable-line stdlib/no-redeclare\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport fromIterator from './from_iterator.js';\nimport fromIteratorMap from './from_iterator_map.js';\n\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = 8; // 8 bytes per double\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\nvar BYTE_ORDER = 'little-endian';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if a value is a `Float64ArrayLE` constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `Float64ArrayLE` constructor\n*/\nfunction isFloat64ArrayLEConstructor( value ) { // eslint-disable-line id-length\n\treturn ( value === Float64ArrayLE );\n}\n\n\n// MAIN //\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in little-endian byte order.\n*\n* @constructor\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or an iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @throws {TypeError} if provided only one argument, the argument must be a valid argument\n* @throws {TypeError} byte offset must be a nonnegative integer\n* @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements\n* @returns {Float64ArrayLE} typed array instance\n*\n* @example\n* var arr = new Float64ArrayLE();\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var arr = new Float64ArrayLE( 2 );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var arr = new Float64ArrayLE( [ 1.0, 2.0 ] );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new Float64ArrayLE( buf );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new Float64ArrayLE( buf, 8 );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Float64ArrayLE( buf, 8, 2 );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 2\n*/\nfunction Float64ArrayLE() {\n\tvar nargs = arguments.length;\n\tif ( !(this instanceof Float64ArrayLE) ) {\n\t\tif ( nargs === 0 ) {\n\t\t\treturn new Float64ArrayLE();\n\t\t}\n\t\tif ( nargs === 1 ) {\n\t\t\treturn new Float64ArrayLE( arguments[0] );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\treturn new Float64ArrayLE( arguments[0], arguments[1] );\n\t\t}\n\t\treturn new Float64ArrayLE( arguments[0], arguments[1], arguments[2] );\n\t}\n\tif ( nargs === 0 ) {\n\t\tparent.call( this, BYTE_ORDER );\n\t} else if ( nargs === 1 ) {\n\t\tparent.call( this, BYTE_ORDER, arguments[0] );\n\t} else if ( nargs === 2 ) {\n\t\tparent.call( this, BYTE_ORDER, arguments[0], arguments[1] );\n\t} else if ( nargs === 3 ) {\n\t\tparent.call( this, BYTE_ORDER, arguments[0], arguments[1], arguments[2] );\n\t}\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Float64ArrayLE\n* @readonly\n* @type {PositiveInteger}\n* @default 8\n*\n* @example\n* var nbytes = Float64ArrayLE.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Float64ArrayLE, 'BYTES_PER_ELEMENT', BYTES_PER_ELEMENT );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof Float64ArrayLE\n* @readonly\n* @type {string}\n* @default 'Float64ArrayLE'\n*\n* @example\n* var str = Float64ArrayLE.name;\n* // returns 'Float64ArrayLE'\n*/\nsetReadOnly( Float64ArrayLE, 'name', 'Float64ArrayLE' );\n\n/**\n* Creates a new `Float64ArrayLE` from an array-like object or an iterable.\n*\n* @name from\n* @memberof Float64ArrayLE\n* @type {Function}\n* @param {(Collection|Iterable)} src - array-like object or iterable\n* @param {Function} [clbk] - callback to invoke for each source element\n* @param {*} [thisArg] - context\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a Float64ArrayLE\n* @throws {TypeError} first argument must be an array-like object or an iterable\n* @throws {TypeError} second argument must be a function\n* @returns {Float64ArrayLE} typed array instance\n*\n* @example\n* var arr = Float64ArrayLE.from( [ 1.0, 2.0 ] );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* function clbk( v ) {\n*     return v * 2.0;\n* }\n*\n* var arr = Float64ArrayLE.from( [ 1.0, 2.0 ], clbk );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 2\n*/\nsetReadOnly( Float64ArrayLE, 'from', function from( src ) {\n\tvar thisArg;\n\tvar nargs;\n\tvar clbk;\n\tvar out;\n\tvar buf;\n\tvar tmp;\n\tvar get;\n\tvar len;\n\tvar i;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( format('null01') );\n\t}\n\tif ( !isFloat64ArrayLEConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a Float64ArrayLE.' );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'null2H', clbk ) );\n\t\t}\n\t\tif ( nargs > 2 ) {\n\t\t\tthisArg = arguments[ 2 ];\n\t\t}\n\t}\n\tif ( isCollection( src ) ) {\n\t\tif ( clbk ) {\n\t\t\tlen = src.length;\n\t\t\tif ( src.get && src.set ) {\n\t\t\t\tget = accessorGetter( 'default' );\n\t\t\t} else {\n\t\t\t\tget = getter( 'default' );\n\t\t\t}\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tbuf.setFloat64( i*BYTES_PER_ELEMENT, clbk.call( thisArg, get( src, i ), i ), true );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn new this( src );\n\t}\n\tif ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) {\n\t\tbuf = src[ ITERATOR_SYMBOL ]();\n\t\tif ( !isFunction( buf.next ) ) {\n\t\t\tthrow new TypeError( format( 'null2J', src ) );\n\t\t}\n\t\tif ( clbk ) {\n\t\t\ttmp = fromIteratorMap( buf, clbk, thisArg );\n\t\t} else {\n\t\t\ttmp = fromIterator( buf );\n\t\t}\n\t\tlen = tmp.length;\n\t\tout = new this( len );\n\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tbuf.setFloat64( i*BYTES_PER_ELEMENT, tmp[ i ], true );\n\t\t}\n\t\treturn out;\n\t}\n\tthrow new TypeError( format( 'null2J', src ) );\n});\n\n/**\n* Creates a new `Float64ArrayLE` from a variable number of arguments.\n*\n* @name of\n* @memberof Float64ArrayLE\n* @type {Function}\n* @param {...*} element - array elements\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a Float64ArrayLE\n* @returns {Float64ArrayLE} typed array instance\n*\n* @example\n* var arr = Float64ArrayLE.of( 1.0, 1.0, 1.0, 1.0 );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 4\n*/\nsetReadOnly( Float64ArrayLE, 'of', function of() {\n\tvar args;\n\tvar i;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( format('null01') );\n\t}\n\tif ( !isFloat64ArrayLEConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a Float64ArrayLE.' );\n\t}\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn new this( args );\n});\n\n// Inherit from the parent constructor:\ninherits( Float64ArrayLE, parent );\n\n\n// EXPORTS //\n\nexport default Float64ArrayLE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {Array} output array\n*/\nfunction fromIteratorMap( it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tout.push( clbk.call( thisArg, v.value, i ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIteratorMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {Array} output array\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push( v.value );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIterator;\n"],"names":["HAS_ITERATOR_SYMBOL","hasIteratorSymbolSupport","BYTE_ORDER","isFloat64ArrayLEConstructor","value","Float64ArrayLE","nargs","arguments","length","this","parent","call","setReadOnly","src","thisArg","clbk","out","buf","tmp","get","len","i","isFunction","TypeError","format","isCollection","set","accessorGetter","getter","_buffer","setFloat64","isObject","ITERATOR_SYMBOL","next","it","v","done","push","fromIteratorMap","fromIterator","args","inherits"],"mappings":"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"}